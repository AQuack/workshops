---

# Teams
- name: Create analyst team
  awx.awx.team:
    name: "TeamSIEM"
    description: "Analysts Team"
    organization: "Default"
    state: present
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: Create IDS team
  awx.awx.team:
    name: "TeamIDS"
    description: "IDS Team"
    organization: "Default"
    state: present
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: Create Firewall team
  awx.awx.team:
    name: "TeamFIREWALL"
    description: "Firewall Team"
    organization: "Default"
    state: present
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

# Users
- name: Add user analyst
  awx.awx.user:
    username: analyst
    password: "{{ admin_password }}"
    email: analyst@redhat.com
    first_name: Mary
    last_name: Analyst
    state: present
    superuser: false
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: Add user opsids
  awx.awx.user:
    username: opsids
    password: "{{ admin_password }}"
    email: opsids@redhat.com
    first_name: Carter
    last_name: Ops
    state: present
    superuser: false
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: Add user opsfirewall
  awx.awx.user:
    username: opsfirewall
    password: "{{ admin_password }}"
    email: opsfirewall@redhat.com
    first_name: Kim
    last_name: Ops
    state: present
    superuser: false
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

# Assign users to default org
- name: Ensure that user analyst belongs to the Default org
  awx.awx.role:
    user: analyst
    organization: "Default"
    role: member
    state: present
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: Ensure that user opsids belongs to the Default org
  awx.awx.role:
    user: opsids
    organization: "Default"
    role: member
    state: present
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: Ensure that user opsfirewall belongs to the Default org
  awx.awx.role:
    user: opsfirewall
    organization: "Default"
    role: member
    state: present
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

# Teams assignment
- name: Assign analyst to group TeamSIEM
  awx.awx.role:
    user: analyst
    target_team: "TeamSIEM"
    role: member
    state: present
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: Assign opsids to group TeamIDS
  awx.awx.role:
    user: opsids
    target_team: "TeamIDS"
    role: member
    state: present
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: Assign opsfirewall to group TeamFirewall
  awx.awx.role:
    user: opsfirewall
    target_team: "TeamFIREWALL"
    role: member
    state: present
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

# Add repository(ies) as project(s)
# Can either update this project to a different scm_url:, change the scm_branch:
# or leave include the second project
- name: Add git repository as Tower project
  awx.awx.project:
    name: "Workshop Project"
    organization: "Default"
    scm_type: git
    scm_url: "https://github.com/ansible-security/workshop-examples"
#    scm_branch: devel
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false
  register: add_repo
  until: add_repo is not failed
  retries: 5
  delay: 10

# - name: Add git repository as Controller project
#   awx.awx.project:
#     name: "BH Mini Project"
#     organization: "Default"
#     scm_type: git
#     scm_url: "https://gitlab.com/redhatautomation/rfshsec.git"
#     controller_username: admin
#     controller_password: "{{ admin_password }}"
#     controller_host: "https://{{ ansible_host }}"
#     validate_certs: false
#   register: add_repo
#   until: add_repo is not failed
#   retries: 5
#   delay: 10


- name: Wait for update to finish
  pause:
    minutes: 1

# Add execution environment
# This could be updated in the future to remove this requirement
- name: Add git repository as Controller project
  awx.awx.execution_environment:
    name: "BH EE"
    image: "registry.gitlab.com/redhatautomation/rfshsec:latest"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

# Job templates
- name: Job template sending firewall logs to QRadar
  awx.awx.job_template:
    name: "Send firewall logs to QRadar"
    job_type: "run"
    inventory: "Workshop Inventory"
    project: "Workshop Project"
#    project: "BH Mini Project"
    playbook: "cp_log.yml"
    state: "present"
    limit: "checkpoint"
    execution_environment: "{{ workshop_type }} workshop execution environment"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    use_fact_cache: true
    validate_certs: false

- name: Job template sending IDPS logs to QRadar
  awx.awx.job_template:
    name: "Send IDPS logs to QRadar"
    job_type: "run"
    inventory: "Workshop Inventory"
    project: "Workshop Project"
#    project: "BH Mini Project"    
    playbook: "idps_log.yml"
    state: "present"
    limit: "snort"
    credential: "Workshop Credential"
    become_enabled: true
    execution_environment: "{{ workshop_type }} workshop execution environment"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    use_fact_cache: true
    validate_certs: false

- name: Job template accepting firewall logs in QRadar
  awx.awx.job_template:
    name: "Accept firewall logs in QRadar"
    job_type: "run"
    inventory: "Workshop Inventory"
    project: "Workshop Project"
#    project: "BH Mini Project"
    playbook: "qradar_cp_log.yml"
    state: "present"
    limit: "qradar"
    execution_environment: "{{ workshop_type }} workshop execution environment"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    use_fact_cache: true
    validate_certs: false

- name: Job template accepting IDPS logs in QRadar
  awx.awx.job_template:
    name: "Accept IDPS logs in QRadar"
    job_type: "run"
    inventory: "Workshop Inventory"
    project: "Workshop Project"
#    project: "BH Mini Project"
    playbook: "qradar_snort_log.yml"
    state: "present"
    limit: "qradar"
    execution_environment: "{{ workshop_type }} workshop execution environment"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    use_fact_cache: true
    validate_certs: false

- name: Job template rolling back everything
  awx.awx.job_template:
    name: "Roll back all changes"
    job_type: "run"
    inventory: "Workshop Inventory"
    project: "Workshop Project"
#    project: "BH Mini Project"
    playbook: "rollback.yml"
    state: "present"
    credential: "Workshop Credential"
    execution_environment: "{{ workshop_type }} workshop execution environment"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    use_fact_cache: true
    validate_certs: false

- name: Job template adding web attack IDPS rule
  awx.awx.job_template:
    name: "Add IDPS rule"
    job_type: "run"
    inventory: "Workshop Inventory"
    project: "Workshop Project"
#    project: "BH Mini Project"
    playbook: "web_snort_rule.yml"
    state: "present"
    limit: "snort"
    credential: "Workshop Credential"
    become_enabled: true
    survey_enabled: true
    survey_spec: "{{ lookup('template', 'security_survey_ids_rule.json') }}"
    execution_environment: "{{ workshop_type }} workshop execution environment"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    use_fact_cache: true
    validate_certs: false

- name: Job template adding start web attack simulation
  awx.awx.job_template:
    name: "Start web attack simulation"
    job_type: "run"
    inventory: "Workshop Inventory"
    project: "Workshop Project"
#    project: "BH Mini Project"
    playbook: "start_web_attack_sim.yml"
    state: "present"
    limit: "attacker"
    credential: "Workshop Credential"
    become_enabled: true
    execution_environment: "{{ workshop_type }} workshop execution environment"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    use_fact_cache: true
    validate_certs: false

- name: Job template adding stop web attack simulation
  awx.awx.job_template:
    name: "Stop web attack simulation"
    job_type: "run"
    inventory: "Workshop Inventory"
    project: "Workshop Project"
#    project: "BH Mini Project"
    playbook: "stop_web_attack_sim.yml"
    state: "present"
    limit: "attacker"
    credential: "Workshop Credential"
    become_enabled: true
    execution_environment: "{{ workshop_type }} workshop execution environment"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    use_fact_cache: true
    validate_certs: false

- name: Job template adding allow entry for attacker
  awx.awx.job_template:
    name: "Allow attacker"
    job_type: "run"
    inventory: "Workshop Inventory"
    project: "Workshop Project"
#    project: "BH Mini Project"
    playbook: "allowdeny_attacker.yml"
    state: "present"
    limit: "checkpoint"
    execution_environment: "BH EE"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    use_fact_cache: true
    validate_certs: false
  
- name: Job template adding deny entry for attacker
  awx.awx.job_template:
    name: "Deny attacker"
    job_type: "run"
    inventory: "Workshop Inventory"
    project: "Workshop Project"
#    project: "BH Mini Project"
    playbook: "allowdeny_attacker.yml"
    state: "present"
    limit: "checkpoint"
    extra_vars: "action_choice: deny"
    execution_environment: "BH EE"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    use_fact_cache: true
    validate_certs: false

- name: Job template adding rollback for checkpoint
  awx.awx.job_template:
    name: "Rollback Checkpoint"
    job_type: "run"
    inventory: "Workshop Inventory"
    project: "Workshop Project"
#    project: "BH Mini Project"
    playbook: "rollback_cp.yml"
    state: "present"
    limit: "checkpoint"
    execution_environment: "BH EE"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    use_fact_cache: true
    validate_certs: false

# Permissions on Job Templates
- name: Ensure that opsfirewall has admin rights for own jobs
  awx.awx.role:
    user: opsfirewall
    role: admin
    job_template: "{{ item }}"
    state: present
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false
  loop:
    - "Send firewall logs to QRadar"
    - "Allow attacker"
    - "Deny attacker"

- name: Ensure that opsfirewall has admin rights for own jobs
  awx.awx.role:
    user: opsids
    role: admin
    job_template: "{{ item }}"
    state: present
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false
  loop:
    - "Send IDPS logs to QRadar"
    - "Add IDPS rule"

- name: Ensure that analyst has admin rights for own jobs
  awx.awx.role:
    user: analyst
    role: admin
    job_template: "{{ item }}"
    state: present
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false
  loop:
    - "Accept firewall logs in QRadar"
    - "Accept IDPS logs in QRadar"

- name: Ensure that analyst can execute IDPS job
  awx.awx.role:
    user: analyst
    role: execute
    job_template: "{{ item }}"
    state: present
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false
  loop:
    - "Roll back all changes"
    - "Send IDPS logs to QRadar"
    