---
- name: ensure tower/controller is online and working
  uri:
    url: https://localhost/api/v2/ping/
    method: GET
    user: admin
    password: "{{ admin_password }}"
    validate_certs: false
    force_basic_auth: true
  register: controller_online
  until: controller_online is success
  delay: 3
  retries: 5

- name: determine if controller or tower
  set_fact:
    controller_or_tower: "{{ 'controller' if 'Platform' in check_controller.x_api_product_name else 'tower' }}"

#### CREDENTIAL
- name: add SSH credential into Automation controller
  awx.awx.credential:
    name: "Workshop Credential"
    credential_type: Machine
    organization: "Default"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false
    inputs:
      username: ec2-user
      ssh_key_data: "{{ lookup('file', playbook_dir +'/' + ec2_name_prefix + '/' + ec2_name_prefix + '-private.pem') }}"

# won't work for Ansible Tower right now....
- name: add tower/controller credential into ansible tower
  when: controller_or_tower=="controller"
  awx.awx.credential:
    name: "Tower Credential"
    kind: "{{ controller_or_tower }}"
    organization: Default
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false
    inputs:
      host: "{{ username }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
      username: admin
      password: "{{ admin_password }}"

- name: create container registry credential
  awx.awx.credential:
    name: registry.redhat.io credential
    organization: Default
    credential_type: Container Registry
    controller_host: "https://{{ ansible_host }}"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    validate_certs: false
    inputs:
      username: "{{ redhat_username }}"
      password: "{{ redhat_password }}"
      host: "registry.redhat.io"
#### END OF CREDENTIAL

### Execution environments

## Execution environments
- name: update default EE to use credential
  awx.awx.execution_environment:
    name: "Default execution environment"
    image: "registry.redhat.io/ansible-automation-platform-20-early-access/ee-supported-rhel8:2.0.0"
    pull: missing
    credential: "registry.redhat.io credential"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: Login to redhat registry
  become_user: awx
  containers.podman.podman_login:
    username: '{{ redhat_username }}'
    password: '{{ redhat_password }}'
    registry: registry.redhat.io

- name: Pull an image
  become_user: awx
  containers.podman.podman_image:
    name: "{{ item }}"
  loop:
    - registry.redhat.io/ansible-automation-platform-20-early-access/ee-supported-rhel8
    - registry.redhat.io/ansible-automation-platform-20-early-access/ee-29-rhel8
    - registry.redhat.io/ansible-automation-platform-20-early-access/ee-minimal-rhel8
### end of execution environments

#### Inventory
- name: create workshop inventory
  awx.awx.inventory:
    name: "Workshop Inventory"
    organization: "Default"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false
  register: workshop_inventory
  until: workshop_inventory is success
  delay: 3
  retries: 5

- name: copy inventory to awx user
  copy:
    src: "/home/{{ username }}/lab_inventory/hosts"
    remote_src: true
    dest: /var/lib/awx/hosts
    owner: awx
    group: awx

- name: import inventory
  become_user: awx
  shell: 'tower-manage inventory_import --source=/var/lib/awx/hosts --inventory-name="Workshop Inventory"'
#### end of inventory

### USER
- name: add student user
  awx.awx.user:
    username: "{{ username }}"
    password: "{{ admin_password }}"
    email: fake@fake.com
    state: present
    superuser: true
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

#### REMOVE BUILT-IN DEMO CONTENT
- name: delete demo job template
  awx.awx.job_template:
    name: "Demo Job Template"
    state: absent
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: remove demo credential
  awx.awx.credential:
    username: admin
    name: "Demo Credential"
    kind: ssh
    state: absent
    organization: ""
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: remove demo inventory
  awx.awx.inventory:
    name: "Demo Inventory"
    organization: "Default"
    state: absent
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false

- name: remove built-in demo project
  awx.awx.project:
    name: "Demo Project"
    organization: "Default"
    scm_type: git
    scm_url: "https://github.com/ansible/ansible-tower-samples"
    state: absent
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_host: "https://{{ ansible_host }}"
    validate_certs: false
#### END OF REMOVE BUILT-IN DEMO CONTENT

- name: setup workshop specific controller information
  include_tasks: "{{item}}"
  with_first_found:
    - "{{role_path}}/tasks/{{workshop_type}}.yml"
    - "{{role_path}}/tasks/unsupported_workshop.yml"
