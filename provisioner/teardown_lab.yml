---
- name: Perform Checks to make sure this Playbook will complete successfully
  hosts: localhost
  connection: local
  become: false
  gather_facts: true
  tasks:
    - name: import galaxy.yml
      include_vars:
        file: "{{ playbook_dir }}/../galaxy.yml"
        name: galaxy_info

    - name: print galaxy info to terminal
      debug:
        var: galaxy_info.version

    - name: retrieve installed ansible.workshops collection
      shell: ansible-galaxy collection list | grep ansible.workshops
      register: installed_version

    - name: compare galaxy.yml to installed version
      set_fact:
        match_galaxy_version: "{{ 'True' if galaxy_info.version in installed_version.stdout else 'False' }}"

    - name: print installed galaxy version to terminal
      debug:
        var: match_galaxy_version

    - name: install missing collections
      when: not match_galaxy_version
      block:
        - name: build workshop into collection
          shell: "ansible-galaxy collection build --verbose --force --output-path build/ {{ playbook_dir }}/.."

        - name: install newly created collection
          shell: "ansible-galaxy collection install --verbose --force-with-deps build/*.tar.gz"

        - name: Delete content & directory
          file:
            state: absent
            path: build

- name: Destroy lab instances in AWS
  hosts: localhost
  connection: local
  become: false
  gather_facts: false

  vars:
    ec2_wait: false
    teardown: true
    s3_state: absent
    state: absent
    debug_teardown: false

  tasks:
    - {include_role: {name: manage_ec2_instances}}
    - {include_role: {name: ansible.workshops.aws_dns}, when: dns_type == "aws"}
    - {include_role: {name: ansible.workshops.code_server}, when: code_server}
    - {include_role: {name: ansible.workshops.gitlab_server}, when: workshop_type == "windows"}
    - {include_role: {name: ansible.workshops.workshop_attendance}, when: attendance}


    - name: Remove workshop local files
      file:
        dest: "{{ playbook_dir }}/{{ ec2_name_prefix }}"
        state: absent
