---
- name: setup collections for ansible.workshops
  hosts: localhost
  connection: local
  become: false
  gather_facts: true
  tasks:
    - name: import galaxy.yml
      include_vars:
        file: "{{ playbook_dir }}/../galaxy.yml"
        name: galaxy_info

    - name: print galaxy info to terminal
      debug:
        var: galaxy_info.version

    - name: retrieve installed ansible.workshops collection
      shell: ansible-galaxy collection list | grep ansible.workshops
      register: installed_version
      ignore_errors: true

    - name: compare galaxy.yml to installed version
      set_fact:
        match_galaxy_version: "{{ 'True' if galaxy_info.version in installed_version.stdout else 'False' }}"

    - name: print installed galaxy version to terminal
      debug:
        var: match_galaxy_version

    - name: install missing collections
      when: not match_galaxy_version or developer_mode
      block:
        - name: build workshop into collection
          shell: "ansible-galaxy collection build --verbose --force --output-path build/ {{ playbook_dir }}/.."

        - name: install newly created collection
          shell: "ansible-galaxy collection install --verbose --force-with-deps build/*.tar.gz"

        - name: Delete content & directory
          file:
            state: absent
            path: build

    - name: workshop collection final check
      block:
        - name: run pre-check role to make sure workshop will complete provisioning
          include_role:
            name: ansible.workshops.workshop_check_setup

        - name: run AWS check setup if using AWS
          include_role:
            name: ansible.workshops.aws_check_setup

        - name: download AAP
          include_role:
            name: ansible.workshops.aap_download
      rescue:
        - name: Example using fail and when together
          fail:
            msg: If you have recieved a 'was not found' error please re-run the provisioner.  Collections can only be updated, not installed, within the same Ansible play.  If you still have an issue with your workshop setup on your control node, please open an issue on https://github.com/ansible/workshops

- name: Create lab instances in AWS
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  pre_tasks:
    - name: Cluster nodes
      set_fact:
        control_nodes: 4
      when: create_cluster is defined and create_cluster|bool
  roles:
    - manage_ec2_instances

- name: wait for all nodes to have SSH reachability
  hosts: "managed_nodes:control_nodes:attendance"
  become: true
  gather_facts: false
  tasks:
    - include_role:
        name: ansible.workshops.connectivity_test

- name: Configure nginx on attendance host
  hosts: attendance
  become: true
  gather_facts: true
  tasks:
    - block:
        - include_role:
            name: ansible.workshops.workshop_attendance_nginx
        - include_role:
            name: ansible.workshops.workshop_attendance
      when: attendance|bool

- name: wait for all security nodes to have SSH reachability
  hosts: "security_connection_check"
  become: true
  gather_facts: false
  tasks:
    - include_role:
        name: ansible.workshops.connectivity_test

- name: Configure common options on managed nodes and control nodes
  hosts: "managed_nodes:control_nodes"
  gather_facts: false
  become: true
  tasks:
    - include_role:
        name: ansible.workshops.user_accounts
    - include_role:
        name: ansible.workshops.common

- name: Configure /etc/hosts
  hosts: 'managed_nodes:control_nodes'
  gather_facts: true
  become: true
  tasks:
    - name: setup /etc/hosts file per student
      copy:
        src: "{{ playbook_dir }}/{{ec2_name_prefix}}/{{ username }}-etchosts.txt"
        dest: "/etc/hosts"
        owner: "{{ username }}"
        group: "{{ username }}"

- name: configure ansible control node
  hosts: '*ansible-1'
  gather_facts: true
  become: true
  tasks:
    - include_role:
        name: ansible.workshops.control_node

    - include_role:
        name: ansible.workshops.code_server
      when:
        - code_server is defined
        - code_server
        - controllerinstall is defined
        - controllerinstall

- name: replicate venvs to cluster nodes
  hosts: '*ansible-2,*ansible-3'
  gather_facts: false
  become: true
  tasks:
    - include_role:
        name: ansible.workshops.control_node
        tasks_from: package_dependencies
      when: create_cluster|bool

    - include_role:
        name: ansible.workshops.control_node
        tasks_from: venv
      when: create_cluster|bool


- name: add dns entires for all student control nodes
  hosts: '*ansible-1'
  become: true
  gather_facts: false
  tasks:
    - include_role:
        name: ansible.workshops.aws_dns
      when:
        - dns_type is defined
        - dns_type == "aws"
        - controllerinstall is defined
        - controllerinstall
  tags: control_node

- name: populate automation controller
  hosts: '*ansible-1'
  become: true
  gather_facts: false

  tasks:
    - name: run populate_controller role
      include_role:
        name: ansible.workshops.populate_controller
      when:
        - controllerinstall is defined
        - controllerinstall|bool
        - populatecontroller

- name: include workshop_type unique setup roles
  import_playbook: "{{workshop_type}}.yml"

- name: setup demos
  hosts: control_nodes
  gather_facts: false
  vars:
    my_tower_username: admin
    my_tower_password: "{{ admin_password }}"
    my_tower_host: "{{ ansible_host }}"
  tasks:
    - name: install demos from ansible.product_demos collection
      block:
        - name: install demo
          include_role:
            name: "ansible.product_demos.install_demo"
          when:
            - demo is defined
            - controllerinstall is defined
            - controllerinstall
      rescue:
        - name: install demo
          debug:
            msg: "Demos were NOT installed"

        - name: update demo_information var
          set_fact:
            demo_information: "Demo issue: Demos were NOT installed"

- name: Alert the mothership
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tasks:
    - {include_role: {name: ansible.workshops.tower_request}, when: student_total > 9}

- name: print out information for instructor
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: set facts for output
      set_fact:
        summary_information: |
          PROVISIONER SUMMARY
          *******************
          - Workshop name is {{ec2_name_prefix}}
          - Instructor inventory is located at  {{playbook_dir}}/{{ec2_name_prefix}}/instructor_inventory.txt
          - Private key is located at {{playbook_dir}}/{{ec2_name_prefix}}/{{ec2_name_prefix}}-private.pem
          {% if attendance %}
          - {{hostvars['attendance-host'].login_website_information | default("attendance feature is off") }}
          {% endif %}

          FAILURES
          *******************
          {{dns_information}}
          {{callback_information}}
          {{ demo_information }}

    - name: Print Summary Information
      debug:
        msg: "{{summary_information}}"
