---
- name: configure leapp workshop for webservers
  hosts: lab_hosts
  become: true
  gather_facts: false
  tasks:
    - name: configure RHEL webservers
      include_role:
        name: ../../roles/webservers

- name: configure controller for leapp
  hosts: control_nodes
  gather_facts: false
  vars:
    controller_infra_workloads:
      - redhat_cop.controller_configuration.credential_types
      - redhat_cop.controller_configuration.credentials
      - redhat_cop.controller_configuration.projects
      - redhat_cop.controller_configuration.inventories
      - redhat_cop.controller_configuration.inventory_sources
      - redhat_cop.controller_configuration.job_templates
    controller_hostname: "https://{{ ansible_host }}"
    controller_username: admin
    controller_password: "{{ admin_password }}"
    controller_validate_certs: false
    controller_credential_types:
      - name: Satellite_Collection
        description: Credential for redhat.satellite collection
        kind: cloud
        inputs:
          fields:
            - type: string
              id: username
              label: Satellite Username
            - type: string
              id: password
              label: Satellite Password
              secret: true
            - type: string
              id: host
              label: Satellite Hostname
          required:
            - username
            - password
            - host
        injectors:
          env:
            FOREMAN_SERVER: !unsafe '{{ host }}'
            FOREMAN_USER: !unsafe '{{ username}}'
            FOREMAN_PASSWORD: !unsafe '{{ password }}'
            FOREMAN_VALIDATE_CERTS: 'false'
      - name: GitHub_Personal_Access_Token
        description: Credential for GitHub repo operations automation
        kind: cloud
        inputs:
          fields:
            - type: string
              id: personal_access_token
              label: Personal Access Token
              secret: true
              help_text: GitHub Personal Access Token
              multiline: true
          required:
            - personal_access_token
        injectors:
          env:
            MY_PA_TOKEN: !unsafe '{{ personal_access_token }}'
    controller_projects:
      - name: Project Leapp
        organization: Default
        scm_update_on_launch: true
        scm_update_cache_timeout: 3600
        scm_type: git
        scm_url: 'https://github.com/redhat-partner-tech/leapp-project'
        scm_branch: main
        default_environment: leapp workshop execution environment
    controller_templates:
      - name: Fact Scan
        project: Project Leapp
        playbook: fact_scan.yml
        inventory: Workshop Inventory
        limit: web
        use_fact_cache: true
        credentials:
          - Workshop Credential
        extra_vars:
          _hosts: all
      - name: OS Update
        project: Project Leapp
        playbook: pkgs_full_update.yml
        inventory: Workshop Inventory
        limit: web
        credentials:
          - Workshop Credential
      - name: Leapp Analysis
        project: Project Leapp
        playbook: analysis.yml
        inventory: Workshop Inventory
        limit: web
        credentials:
          - Workshop Credential
        extra_vars:
          leapp_upgrade_type: connected
          leapp_metadata_url: https://host.location/leapp-data-21.tar.gz
          leapp_repos_enabled: []
        ask_variables_on_launch: true
      - name: Leapp Upgrade
        project: Project Leapp
        playbook: upgrade.yml
        inventory: Workshop Inventory
        limit: web
        credentials:
          - Workshop Credential
        extra_vars:
          leapp_upgrade_type: connected
          leapp_repos_enabled: []
        ask_variables_on_launch: true
      - name: Leapp Analysis
        project: Project Leapp
        playbook: analysis.yml
        inventory: Workshop Inventory
        limit: web
        credentials:
          - Workshop Credential
      - name: Rectify RHEL7
        project: Project Leapp
        playbook: rectify_rhel7.yml
        inventory: Workshop Inventory
        limit: rhel7
        credentials:
          - Workshop Credential
      - name: Snapshot Instance
        project: Project Leapp
        playbook: snapshot_instance.yml
        inventory: Workshop Inventory
        limit: ansible-1
        credentials:
          - Workshop Credential
        extra_vars:
          snapshot: aws
          ec2_region: "{{ ec2_region }}"
          instances:
            tags:
              guid: "{{ ec2_name_prefix }}"
              Student: student1
              operating_system: rhel
      - name: Snapshot Instance / Revert
        project: Project Leapp
        playbook: snapshot_revert.yml
        inventory: Workshop Inventory
        limit: ansible-1
        credentials:
          - Workshop Credential
        extra_vars:
          snapshot: aws
          ec2_region: "{{ ec2_region }}"
          instances:
            tags:
              guid: "{{ ec2_name_prefix }}"
              Student: "{{ student }}"
              operating_system: rhel
          snapshots:
            tags:
              Workshop: "{{ ec2_name_prefix }}"
              Student: "{{ student }}"
              Environment: leapp
      - name: Instance Details
        project: Project Leapp
        playbook: instance_details.yml
        inventory: Workshop Inventory
        limit: ansible-1
        credentials:
          - Workshop Credential
        extra_vars:
          ec2_region: "{{ ec2_region }}"
          instances:
            tags:
              guid: "{{ ec2_name_prefix }}"
              Student: "{{ student }}"
              operating_system: rhel
      - name: Update inventories via dynamic sources
        project: Project Leapp
        playbook: inventory_source_update.yml
        inventory: Workshop Inventory
        credentials:
          - Controller Credential
        survey_enabled: true
        survey:
          name: ''
          description: ''
          spec:
            - question_name: Select inventory to update
              type: multiplechoice
              variable: rhel_inventory_name
              choices:
                - rhel7
                - rhel8
                - rhel9
              required: true
    controller_inventories:
      - name: rhel7
        organization: Default
        variables:
          instances:
            tags:
              guid: "{{ ec2_name_prefix }}"
              Student: "{{ student }}"
              operating_system: rhel
              os_major_version: 7
      - name: rhel8
        organization: Default
        variables:
          instances:
            tags:
              guid: "{{ ec2_name_prefix }}"
              Student: "{{ student }}"
              operating_system: rhel
              os_major_version: 8
      - name: rhel9
        organization: Default
        variables:
          instances:
            tags:
              guid: "{{ ec2_name_prefix }}"
              Student: "{{ student }}"
              operating_system: rhel
              os_major_version: 9
    controller_inventory_sources:
      - name: EC2 Dynamic Source - rhel7
        inventory: rhel7
        source: ec2
        source_vars:
          regions:
            - "{{ ec2_region }}"
          filters:
              tag:guid: "{{ ec2_name_prefix }}"
              tag:Student: "{{ student }}"
              tag:operating_system: rhel
              tag:os_major_version: 7
          hostnames:
            - tag:short_name
            - tag:NodeName
            - tag:Name
            - private-dns-name
          compose:
            # set the ansible_host variable to connect with the private IP address without changing the hostname
            ansible_host: private_ip_address
        overwrite: true
        update_on_launch: false
        update_cache_timeout: 0
      - name: EC2 Dynamic Source - rhel8
        inventory: rhel8
        source: ec2
        source_vars:
          regions:
            - "{{ ec2_region }}"
          filters:
              tag:guid: "{{ ec2_name_prefix }}"
              tag:Student: "{{ student }}"
              tag:operating_system: rhel
              tag:os_major_version: 8
          hostnames:
            - tag:short_name
            - tag:NodeName
            - tag:Name
            - private-dns-name
          compose:
            # set the ansible_host variable to connect with the private IP address without changing the hostname
            ansible_host: private_ip_address
        overwrite: true
        update_on_launch: false
        update_cache_timeout: 0
      - name: EC2 Dynamic Source - rhel9
        inventory: rhel9
        source: ec2
        source_vars:
          regions:
            - "{{ ec2_region }}"
          filters:
              tag:guid: "{{ ec2_name_prefix }}"
              tag:Student: "{{ student }}"
              tag:operating_system: rhel
              tag:os_major_version: 9
          hostnames:
            - tag:short_name
            - tag:NodeName
            - tag:Name
            - private-dns-name
          compose:
            # set the ansible_host variable to connect with the private IP address without changing the hostname
            ansible_host: private_ip_address
        overwrite: true
        update_on_launch: false
        update_cache_timeout: 0
  
  tasks:
    # Allow projects to pull collections via collections/requirements.yml
    - name: Turn on AWX_COLLECTIONS_ENABLED on controller
      awx.awx.settings:
        name: AWX_COLLECTIONS_ENABLED
        value: true
        controller_username: admin
        controller_password: "{{ admin_password }}"
        controller_host: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
        validate_certs: false

    - name: Deploy controller-infra workloads
      include_role:
        name: "{{ controller_infra_vars }}"
      loop: "{{ controller_infra_workloads }}"
      loop_control:
        loop_var: controller_infra_vars
      when:
        - controller_infra_workloads | d("") | length >0

- name: Final workshop preparations
  hosts: control_nodes
  become: true
  gather_facts: true

  tasks:

    - when: provision_mode == "workshop"
      block:
        - name: Run Snapshot Instance job template
          awx.awx.job_launch:
            job_template: "Snapshot Instance"
            controller_username: admin
            controller_password: "{{ admin_password }}"
            controller_host: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
          register: snapshot_instance_job

        - name: "Check API until Snapshot Instance job is successful"
          ansible.builtin.uri:
            url: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}/api/v2/jobs/{{ snapshot_instance_job.id }}/?format=json"
            user: admin
            password: "{{ admin_password }}"
            force_basic_auth: true
            method: GET
            return_content: true
            status_code: 200
            validate_certs: false
          register: workshop_job_template01
          until: workshop_job_template01.json.status == "successful"
          delay: 20  # Every 20 seconds
          retries: 180  # 1hour 60*60/20

        - name: Run OS Update job template
          awx.awx.job_launch:
            job_template: "OS Update"
            controller_username: admin
            controller_password: "{{ admin_password }}"
            controller_host: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
          register: osupdatejob

        - name: "Check API until OS Update job is successful"
          ansible.builtin.uri:
            url: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}/api/v2/jobs/{{ osupdatejob.id }}/?format=json"
            user: admin
            password: "{{ admin_password }}"
            force_basic_auth: true
            method: GET
            return_content: true
            status_code: 200
            validate_certs: false
          register: workshop_job_template02
          until: workshop_job_template02.json.status == "successful"
          delay: 20  # Every 20 seconds
          retries: 180  # 1hour 60*60/20

    - when: provision_mode == "demo"
      block:
        - name: Run Fact Scan job template
          awx.awx.job_launch:
            job_template: "Fact Scan"
            controller_username: admin
            controller_password: "{{ admin_password }}"
            controller_host: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
          register: factscanjob

        - name: "Check API until Fact Scan job is successful"
          ansible.builtin.uri:
            url: "https://{{ student }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}/api/v2/jobs/{{ factscanjob.id }}/?format=json"
            user: admin
            password: "{{ admin_password }}"
            force_basic_auth: true
            method: GET
            return_content: true
            status_code: 200
            validate_certs: false
          register: demo_job_template01
          until: demo_job_template01.json.status == "successful"
          delay: 20  # Every 20 seconds
          retries: 180  # 1hour 60*60/20
...
